/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { Public } from "../../decorators/public.decorator";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { HousingApplicantFindManyArgs } from "../../housingApplicant/base/HousingApplicantFindManyArgs";
import { HousingApplicant } from "../../housingApplicant/base/HousingApplicant";
import { HousingApplicantWhereUniqueInput } from "../../housingApplicant/base/HousingApplicantWhereUniqueInput";
import { HousingOfferingFindManyArgs } from "../../housingOffering/base/HousingOfferingFindManyArgs";
import { HousingOffering } from "../../housingOffering/base/HousingOffering";
import { HousingOfferingWhereUniqueInput } from "../../housingOffering/base/HousingOfferingWhereUniqueInput";
import { JobApplicantFindManyArgs } from "../../jobApplicant/base/JobApplicantFindManyArgs";
import { JobApplicant } from "../../jobApplicant/base/JobApplicant";
import { JobApplicantWhereUniqueInput } from "../../jobApplicant/base/JobApplicantWhereUniqueInput";
import { JobOfferingFindManyArgs } from "../../jobOffering/base/JobOfferingFindManyArgs";
import { JobOffering } from "../../jobOffering/base/JobOffering";
import { JobOfferingWhereUniqueInput } from "../../jobOffering/base/JobOfferingWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: data,
      select: {
        description: true,
        first_name: true,
        id: true,
        last_name: true,
        location: true,
        roles: true,
        telephone_number: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(UserFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        description: true,
        first_name: true,
        id: true,
        last_name: true,
        location: true,
        roles: true,
        telephone_number: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        description: true,
        first_name: true,
        id: true,
        last_name: true,
        location: true,
        roles: true,
        telephone_number: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          description: true,
          first_name: true,
          id: true,
          last_name: true,
          location: true,
          roles: true,
          telephone_number: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          description: true,
          first_name: true,
          id: true,
          last_name: true,
          location: true,
          roles: true,
          telephone_number: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "HousingApplicant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/housing_applicants")
  @ApiNestedQuery(HousingApplicantFindManyArgs)
  async findManyHousingApplicants(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<HousingApplicant[]> {
    const query = plainToClass(HousingApplicantFindManyArgs, request.query);
    const results = await this.service.findHousingApplicants(params.id, {
      ...query,
      select: {
        house_offeringI_id: {
          select: {
            id: true,
          },
        },

        id: true,
        isAccepted: true,

        user_id: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/housing_applicants")
  async connectHousingApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HousingApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      housing_applicants: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/housing_applicants")
  async updateHousingApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HousingApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      housing_applicants: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/housing_applicants")
  async disconnectHousingApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HousingApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      housing_applicants: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/housing_offerings")
  @ApiNestedQuery(HousingOfferingFindManyArgs)
  async findManyHousingOfferings(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<HousingOffering[]> {
    const query = plainToClass(HousingOfferingFindManyArgs, request.query);
    const results = await this.service.findHousingOfferings(params.id, {
      ...query,
      select: {
        address: true,

        author_id: {
          select: {
            id: true,
          },
        },

        city: true,
        description: true,
        id: true,
        price: true,
        rooms_number: true,
        size: true,
        title: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/housing_offerings")
  async connectHousingOfferings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HousingOfferingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      housing_offerings: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/housing_offerings")
  async updateHousingOfferings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HousingOfferingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      housing_offerings: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/housing_offerings")
  async disconnectHousingOfferings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HousingOfferingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      housing_offerings: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "JobApplicant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/job_applicants")
  @ApiNestedQuery(JobApplicantFindManyArgs)
  async findManyJobApplicants(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<JobApplicant[]> {
    const query = plainToClass(JobApplicantFindManyArgs, request.query);
    const results = await this.service.findJobApplicants(params.id, {
      ...query,
      select: {
        id: true,
        isAccepted: true,

        job_offering_id: {
          select: {
            id: true,
          },
        },

        user_id: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/job_applicants")
  async connectJobApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: JobApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      job_applicants: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/job_applicants")
  async updateJobApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: JobApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      job_applicants: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/job_applicants")
  async disconnectJobApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: JobApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      job_applicants: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "JobOffering",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/job_offerings")
  @ApiNestedQuery(JobOfferingFindManyArgs)
  async findManyJobOfferings(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<JobOffering[]> {
    const query = plainToClass(JobOfferingFindManyArgs, request.query);
    const results = await this.service.findJobOfferings(params.id, {
      ...query,
      select: {
        author_id: {
          select: {
            id: true,
          },
        },

        city: true,
        description: true,
        id: true,
        max_salary: true,
        min_salary: true,
        position_level: true,
        title: true,
        working_mode: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/job_offerings")
  async connectJobOfferings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: JobOfferingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      job_offerings: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/job_offerings")
  async updateJobOfferings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: JobOfferingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      job_offerings: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/job_offerings")
  async disconnectJobOfferings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: JobOfferingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      job_offerings: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
