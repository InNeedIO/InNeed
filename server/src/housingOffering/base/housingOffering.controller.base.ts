/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestMorgan from "nest-morgan";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HousingOfferingService } from "../housingOffering.service";
import { HousingOfferingCreateInput } from "./HousingOfferingCreateInput";
import { HousingOfferingWhereInput } from "./HousingOfferingWhereInput";
import { HousingOfferingWhereUniqueInput } from "./HousingOfferingWhereUniqueInput";
import { HousingOfferingFindManyArgs } from "./HousingOfferingFindManyArgs";
import { HousingOfferingUpdateInput } from "./HousingOfferingUpdateInput";
import { HousingOffering } from "./HousingOffering";
@swagger.ApiBearerAuth()
export class HousingOfferingControllerBase {
  constructor(
    protected readonly service: HousingOfferingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post()
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: HousingOffering })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: HousingOfferingCreateInput
  ): Promise<HousingOffering> {
    return await this.service.create({
      data: data,
      select: {
        address: true,
        author_id: true,
        city: true,
        description: true,
        id: true,
        price: true,
        rooms_number: true,
        size: true,
        title: true,
      },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get()
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: [HousingOffering] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(HousingOfferingFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<HousingOffering[]> {
    const args = plainToClass(HousingOfferingFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        address: true,
        author_id: true,
        city: true,
        description: true,
        id: true,
        price: true,
        rooms_number: true,
        size: true,
        title: true,
      },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id")
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "read",
    possession: "own",
  })
  @swagger.ApiOkResponse({ type: HousingOffering })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: HousingOfferingWhereUniqueInput
  ): Promise<HousingOffering | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        address: true,
        author_id: true,
        city: true,
        description: true,
        id: true,
        price: true,
        rooms_number: true,
        size: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id")
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "update",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: HousingOffering })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: HousingOfferingWhereUniqueInput,
    @common.Body() data: HousingOfferingUpdateInput
  ): Promise<HousingOffering | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          address: true,
          author_id: true,
          city: true,
          description: true,
          id: true,
          price: true,
          rooms_number: true,
          size: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id")
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: HousingOffering })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: HousingOfferingWhereUniqueInput
  ): Promise<HousingOffering | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          address: true,
          author_id: true,
          city: true,
          description: true,
          id: true,
          price: true,
          rooms_number: true,
          size: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
