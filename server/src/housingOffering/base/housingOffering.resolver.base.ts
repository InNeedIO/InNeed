/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateHousingOfferingArgs } from "./CreateHousingOfferingArgs";
import { UpdateHousingOfferingArgs } from "./UpdateHousingOfferingArgs";
import { DeleteHousingOfferingArgs } from "./DeleteHousingOfferingArgs";
import { HousingOfferingFindManyArgs } from "./HousingOfferingFindManyArgs";
import { HousingOfferingFindUniqueArgs } from "./HousingOfferingFindUniqueArgs";
import { HousingOffering } from "./HousingOffering";
import { HousingOfferingService } from "../housingOffering.service";

@graphql.Resolver(() => HousingOffering)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class HousingOfferingResolverBase {
  constructor(
    protected readonly service: HousingOfferingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "read",
    possession: "any",
  })
  async _housingOfferingsMeta(
    @graphql.Args() args: HousingOfferingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HousingOffering])
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "read",
    possession: "any",
  })
  async housingOfferings(
    @graphql.Args() args: HousingOfferingFindManyArgs
  ): Promise<HousingOffering[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HousingOffering, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "read",
    possession: "own",
  })
  async housingOffering(
    @graphql.Args() args: HousingOfferingFindUniqueArgs
  ): Promise<HousingOffering | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HousingOffering)
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "create",
    possession: "any",
  })
  async createHousingOffering(
    @graphql.Args() args: CreateHousingOfferingArgs
  ): Promise<HousingOffering> {
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HousingOffering)
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "update",
    possession: "any",
  })
  async updateHousingOffering(
    @graphql.Args() args: UpdateHousingOfferingArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<HousingOffering | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HousingOffering)
  @nestAccessControl.UseRoles({
    resource: "HousingOffering",
    action: "delete",
    possession: "any",
  })
  async deleteHousingOffering(
    @graphql.Args() args: DeleteHousingOfferingArgs
  ): Promise<HousingOffering | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
