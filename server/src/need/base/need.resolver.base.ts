/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateNeedArgs } from "./CreateNeedArgs";
import { UpdateNeedArgs } from "./UpdateNeedArgs";
import { DeleteNeedArgs } from "./DeleteNeedArgs";
import { NeedFindManyArgs } from "./NeedFindManyArgs";
import { NeedFindUniqueArgs } from "./NeedFindUniqueArgs";
import { Need } from "./Need";
import { NeedService } from "../need.service";

@graphql.Resolver(() => Need)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class NeedResolverBase {
  constructor(
    protected readonly service: NeedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Need",
    action: "read",
    possession: "any",
  })
  async _needsMeta(
    @graphql.Args() args: NeedFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Need])
  @nestAccessControl.UseRoles({
    resource: "Need",
    action: "read",
    possession: "any",
  })
  async needs(@graphql.Args() args: NeedFindManyArgs): Promise<Need[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Need, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Need",
    action: "read",
    possession: "own",
  })
  async need(@graphql.Args() args: NeedFindUniqueArgs): Promise<Need | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Need)
  @nestAccessControl.UseRoles({
    resource: "Need",
    action: "create",
    possession: "any",
  })
  async createNeed(@graphql.Args() args: CreateNeedArgs): Promise<Need> {
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Need)
  @nestAccessControl.UseRoles({
    resource: "Need",
    action: "update",
    possession: "any",
  })
  async updateNeed(
    @graphql.Args() args: UpdateNeedArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Need | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Need)
  @nestAccessControl.UseRoles({
    resource: "Need",
    action: "delete",
    possession: "any",
  })
  async deleteNeed(@graphql.Args() args: DeleteNeedArgs): Promise<Need | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
